<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vagrant+Virtualbox创建虚拟机</title>
    <link href="/2021/01/23/2021-01-23-Vagrant-Virtualbox%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2021/01/23/2021-01-23-Vagrant-Virtualbox%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p></blockquote><p>不管是Windows还是MacOs，想必在开发过程中大家多多少少都会搭建虚拟机来模拟Linux或其他环境测试软件、代码，Windows尤其，Mac还好，那么使用最广泛的肯定是vmware家，但是人家的不开源，如果付费支持一下当然是最(土)好(豪)，如果想白嫖，那就只有….咳咳，所以找找看有没有别的免费vm软件，当然Virtualbox作为oracle大哥家的是非常不错的选择。那么Vagrant是啥呢，进入 Vagrant的官网，标语写的是Development Environments Made Easy 简化开发环境 ，Vagrant提供类似docker的镜像仓库，搭配Virtualbox，先Vagrant拉取镜像创建环境把示例安排给Virtualbox运行，那就完美了，实际使用过程也是真的非常方便~~~</p><h2>1、安装Virtualbox<h2><p>Virtualbox官网：<a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a> ，虽然界面比vmware稍稍差了那么一点，但是还是好用滴。</p><p>先从官网下载自己系统的版本，我的环境是Mac</p><p><img src="/images/image-20210123103951134.png" alt="image-20210123103951134"></p><p>下载完成后step step安装就ok</p><h2>2、安装Vagrant<h2><p>Vagrant官网：<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a> </p><p><img src="/images/image-20210123104128760.png" alt="image-20210123104128760"></p><p>下载之后也是安装就OK</p><h2>3、安装完成vagrant之后在命令行输入 vagrant检查是否安装成功<h2><p>![image-20210123104249580](/Users/zhenglin/Library/Application Support/typora-user-images/image-20210123104249580.png)</p><h2>4、用vagrant创建一个centos7系统<h2><p>类似于docker，vagrant也有一个box镜像仓库<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a></p><p>我们搜索一下centos7</p><p><img src="/images/image-20210123104408845.png" alt="image-20210123104408845"></p><p>我们新建一个文件夹，待会vagrant的file将会自动创建在这</p><p><img src="/images/image-20210123104519750.png" alt="image-20210123104519750"></p><p>执行官网文档上的命令 vagrant init centos/7 完成后vagrant将会在目录下创建一个文件Vagrantfile，后续创建虚拟机都是按照这个文件的配置来操作的</p><p><img src="/images/image-20210123104550397.png" alt="image-20210123104550397"></p><p>我们再启动centos7  vagrant up</p><p><img src="/images/image-20210123104750475.png" alt="image-20210123104750475"></p><p>第一次会下载cetos7的镜像，默认的去上述下载，但是国内速度过慢，可以使用国内的镜像</p><p>那么这里有两种方案：</p><p>a，先下载再本地安装</p><p>b，直接配置好镜像地址自动安装配置</p><blockquote><p>a 方案</p></blockquote><p>我们先去<a href="https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/">https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/</a> 上下载需要的镜像到本地再添加</p><p><img src="/images/image-20210123105011905.png" alt="image-20210123105011905"></p><p>如果之前有同名的centos7可以移除，或者add 时候名字换一个</p><p><img src="/images/image-20210123105034546.png" alt="image-20210123105034546"></p><p>然后初始化vagrant init centos7</p><blockquote><p>b方案</p></blockquote><p>vagrant init centos7 <a href="https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box">https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box</a></p><p>就OK了，当你vagrant up会自动去下载</p><h4>那么总结一下步骤：<h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 官网的命令</span><br>vagrant init centos/<span class="hljs-number">7</span> <br>vagrant up<br><br><span class="hljs-comment"># 手动的 a</span><br>下去下载镜像到本地 ..<span class="hljs-regexp">/box/</span>centos7.box<br>vagrant box add centos7 ..<span class="hljs-regexp">/box/</span>centos7.box<br>vagrant init centos7<br>vagrant up<br><br><span class="hljs-comment"># 手动的 b</span><br>vagrant init centos7 https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/centos-cloud/</span>centos<span class="hljs-regexp">/7/</span>vagrant<span class="hljs-regexp">/x86_64/im</span>ages/CentOS-<span class="hljs-number">7</span>-x86_64-Vagrant-<span class="hljs-number">2004</span>_01.VirtualBox.box  <br>vagrant up<br></code></pre></div></td></tr></table></figure><h2>5、查看Virtualbox<h2><p>当vagrant up成功后，这里报错的，主要看下权限是不是没给，Mac去 安全性与隐私 授权下</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">There was <span class="hljs-keyword">an</span> <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> executing `VBoxManage`, a <span class="hljs-keyword">CLI</span> used <span class="hljs-keyword">by</span> Vagrant <span class="hljs-keyword">for</span> controlling VirtualBox.<br></code></pre></div></td></tr></table></figure><p><img src="/images/image-20210123110100077.png" alt="image-20210123110100077"></p><p><img src="/images/image-20210123110020134.png" alt="image-20210123110020134"></p><h2>6、ssh 连接<h2><p>启动成功后我们在命令行直接使用vagrant ssh连上即可，默认的root密码是vagrant</p><p><img src="/images/image-20210123110304504.png" alt="image-20210123110304504"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
      <tag>vagrant</tag>
      
      <tag>virtualbox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7配置SSH免密钥登录</title>
    <link href="/2021/01/12/2021-01-12-Centos7%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <url>/2021/01/12/2021-01-12-Centos7%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境：</p><p>主机A：Centos7  主机B：MacOS</p></blockquote><p>目标：配置主机B ssh root@主机A-ip 不需要密钥</p><p><strong>第一步：获取主机B的公钥(如何生成ssh密钥略过)</strong></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">cat ~/.ssh/id_rsa.pub<br></code></pre></div></td></tr></table></figure><p><img src="/images/image-20210112102348707.png" alt="image-20210112102348707"></p><p><strong>第二步：新建或修改主机A authorized_keys文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1、生成过则跳过；2、未开启ssh服务也需要先开启；</span><br>ssh-keygen -t rsa<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改ssh文件的权限</span><br>chmod 700 ~/.ss<br></code></pre></div></td></tr></table></figure><p>进入.ssh文件夹</p><p>新建或修改授权authorized_keys文件（有则跳过）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim authorized_keys<br><span class="hljs-meta">#</span><span class="bash"> 修改 authorized_keys文件的权限</span><br>chmod 600 authorized_keys<br></code></pre></div></td></tr></table></figure><p><strong>第三步：拷贝主机B的公钥到主机A的authorized_keys文件里</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim authorized_keys<br></code></pre></div></td></tr></table></figure><p>wq保存退出</p><p><em>验证 主机B ssh root@主机A-ip 是否需要密钥。</em></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas常用操作</title>
    <link href="/2020/12/26/2020-11-26-Pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/12/26/2020-11-26-Pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>判断某列的值是否在列表里</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">df[df[<span class="hljs-string">&#x27;f1&#x27;</span>].isin(<span class="hljs-built_in">list</span>)]<br></code></pre></div></td></tr></table></figure><p>判断某列是否含有某个字符串</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 注意列的type 为 str</span><br>df[df[<span class="hljs-string">&#x27;f1&#x27;</span>].<span class="hljs-built_in">str</span>.contains(<span class="hljs-string">&#x27;str&#x27;</span>)]<br></code></pre></div></td></tr></table></figure><p>多个条件筛选列</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 且</span><br>df[df[<span class="hljs-string">&#x27;f1&#x27;</span>]== <span class="hljs-string">&#x27;a&#x27;</span> &amp; df[<span class="hljs-string">&#x27;f2&#x27;</span>]== <span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-comment"># 或</span><br>df[df[<span class="hljs-string">&#x27;f1&#x27;</span>]== <span class="hljs-string">&#x27;a&#x27;</span> | df[<span class="hljs-string">&#x27;f2&#x27;</span>]== <span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p>遍历df并修改值</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> df.index:<br>    print(df.at[index,<span class="hljs-string">&#x27;列名&#x27;</span>])<br>    df.at[index,<span class="hljs-string">&#x27;列名&#x27;</span>] = <span class="hljs-string">&#x27;update_value&#x27;</span><br></code></pre></div></td></tr></table></figure><p>也可以</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index,row <span class="hljs-keyword">in</span> df.iterrows():<br>  row[<span class="hljs-string">&#x27;f1&#x27;</span>]<br>  <span class="hljs-comment"># 修改值</span><br>  df.at[i,<span class="hljs-string">&#x27;f1&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>按某列groupBy构建字典并修改聚合分组的结果</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">df.groupby(<span class="hljs-string">&#x27;f1&#x27;</span>).apply(lamba x:x[<span class="hljs-string">&#x27;f2&#x27;</span>].astype(<span class="hljs-built_in">str</span>).values).to_dict()<br>df.groupby(<span class="hljs-string">&#x27;f1&#x27;</span>).apply(lamba x:x[<span class="hljs-string">&#x27;f2&#x27;</span>].astype(<span class="hljs-built_in">str</span>).values + <span class="hljs-string">&#x27;@&#x27;</span> + x[<span class="hljs-string">&#x27;f3&#x27;</span>].astype(<span class="hljs-built_in">str</span>).values).to_dict()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_handle</span>(<span class="hljs-params">x</span>):</span><br>   .....<br>   <span class="hljs-keyword">return</span> xx<br>df.groupby(<span class="hljs-string">&#x27;f1&#x27;</span>).apply(lamba x:get_handle(x)).to_dict()<br></code></pre></div></td></tr></table></figure><p>列值转列表</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;f1&#x27;</span>].tolist()<br></code></pre></div></td></tr></table></figure><p>只输出某列</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;f1&#x27;</span>].to_csv()<br>df[[<span class="hljs-string">&#x27;f1&#x27;</span>,<span class="hljs-string">&#x27;f2&#x27;</span>,<span class="hljs-string">&#x27;f3&#x27;</span>]].to_csv()<br></code></pre></div></td></tr></table></figure><p>输出时不带索引，不带header列名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">df.to_excel(output_path,index=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 不带header 列名</span><br>df.to_excel(output_path,index=<span class="hljs-literal">False</span>,header=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p>输出多个sheet</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">writer1 = pd.ExcelWriter(output_file1)<br>x.to_excel(writer1, <span class="hljs-string">&#x27;数据&#x27;</span>)<br>info1 = pd.DataFrame(data=&#123;<span class="hljs-string">&#x27;说明&#x27;</span>: [<span class="hljs-string">&#x27;更正基线&#x27;</span>]&#125;)<br>info1.to_excel(writer1, <span class="hljs-string">&#x27;说明&#x27;</span>, index=<span class="hljs-literal">False</span>)<br>writer1.save()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLAlchemy</title>
    <link href="/2020/12/26/2020-11-26-SQLAlchemy/"/>
    <url>/2020/12/26/2020-11-26-SQLAlchemy/</url>
    
    <content type="html"><![CDATA[<p>在我第一次搜索类似Java的mybatis工具时发现了Python的ORM框架sqlalchemy，此后在工作中使用颇多，发现一些功能还是非常好用的。</p><blockquote><p><strong>version</strong> = “1.3.20”</p></blockquote><p>首先我们install module SQLAlchemy，创建一个连接Connecting，我这里是使用PostgreSQL</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">engine = create_engine(<span class="hljs-string">&#x27;postgresql+psycopg2://username:password@ip:port/database&#x27;</span>, echo=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><p>创建一个session</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">session = create_session(engine, autocommit=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p>Declare a Mapping 创建一个orm映射对象</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, TEXT, INT, TIMESTAMP, FLOAT<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br><span class="hljs-keyword">import</span> base_config<br><br>Base = declarative_base()<br>schema_name = <span class="hljs-string">&#x27;BASE_INFO&#x27;</span><br>table_name = <span class="hljs-string">&#x27;CM_H&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CM</span>(<span class="hljs-params">Base</span>):</span><br>    <span class="hljs-comment"># 对应的table的名称</span><br>    __tablename__ = table_name<br>    <span class="hljs-comment"># 对应的schema的名称 默认schema为public</span><br>    __table_args__ = (&#123;<span class="hljs-string">&quot;schema&quot;</span>: schema_name&#125;)<br><br>    DOMAIN = Column(TEXT)<br>    SUBJID = Column(TEXT)<br>    VISITNUM = Column(TEXT)<br>    CMSEQ = Column(INT)<br>    CMREFID = Column(TEXT)<br>    CMTRT = Column(TEXT)<br>    CMMODIFY = Column(TEXT)<br>    CMDECOD = Column(TEXT)<br>    CMCAT = Column(TEXT)<br>    CMDOSTOT = Column(FLOAT)<br>    CMDOSU = Column(TEXT)<br>    CMDOSFRM = Column(TEXT)<br>    CMDOSFRQ = Column(TEXT)<br>    CMROUTE = Column(TEXT)<br>    CMGRPID = Column(TEXT)<br>    CMDTC = Column(TIMESTAMP)<br>    CMSTDTC = Column(TIMESTAMP)<br>    CMENDTC = Column(TIMESTAMP)<br>    XCMADDIT = Column(TEXT)<br>    XCMSOURC = Column(TEXT)<br>    CMATC = Column(TEXT)<br>    UPDATE_FLAG = Column(INT)<br><br>    __mapper_args__ = &#123;<br>        <span class="hljs-string">&#x27;primary_key&#x27;</span>: [CMSEQ]<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>查询</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 查询全部</span><br>session.query(CM).<span class="hljs-built_in">all</span>()<br><span class="hljs-comment"># 查询第一个</span><br>session.query(CM).first()<br><span class="hljs-comment"># 只查询CMSEQ和CMMODIFY字段，并且按条件过滤</span><br><span class="hljs-comment"># sql = select &quot;CMSEQ&quot;,&quot;CMMODIFY&quot; from &quot;CM&quot; where &quot;CMATC&quot; is null and &quot;UPDATE_FLAG&quot; = 0 limit 1000</span><br>d = session.query(CM.CMSEQ, CM.CMMODIFY).<span class="hljs-built_in">filter</span>(CM.CMATC == <span class="hljs-literal">None</span>, CM.UPDATE_FLAG == <span class="hljs-number">0</span>).limit(<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>   print(i)<br></code></pre></div></td></tr></table></figure><p>批量修改</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">update_list = [&#123;<span class="hljs-built_in">id</span>:v1,up_filed1:up_value1,up_filed2:up_value2&#125;]<br>session.bulk_update_mappings(CM, update_list)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>SQLAlchemy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign-Hystrix</title>
    <link href="/2020/12/26/2020-08-08-Feign-Hystrix/"/>
    <url>/2020/12/26/2020-08-08-Feign-Hystrix/</url>
    
    <content type="html"><![CDATA[<p>使用Hystrix作为熔断器使得调用服务时出现的各种崩溃得到保护，这里我们只讨论如何实现。</p><p>如前几篇文章我们搭建了一个高可用的sever服务，并注册了服务provider和服务customer，现在我们使用Hystrix来模拟provider服务下线的作用。</p><p>创建一个实现类实现HelloService，并重写返回</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloHystrixServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HelloService</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;this is not working&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在HelloService指定fallback的处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name= &quot;provider&quot;,fallback = HelloHystrixServiceImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HelloService</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/getInfo&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String msg)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>先调用一下接口: localhost:8760/testGetInfo?msg=zl</p><p><img src="/images/image-12.png"></p><p>kill掉provider的服务，再调用接口</p><p><img src="/images/image-13.png"></p><p>再启动provider，稍等一会儿，接口又可以正常服务了</p>]]></content>
    
    
    <categories>
      
      <category>springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql中的in和exists</title>
    <link href="/2020/12/26/2020-10-29-sql%E4%B8%AD%E7%9A%84in-%E5%92%8Cexists/"/>
    <url>/2020/12/26/2020-10-29-sql%E4%B8%AD%E7%9A%84in-%E5%92%8Cexists/</url>
    
    <content type="html"><![CDATA[<p>如果查询的两个表大小相当，那么用in和exists差别不大；如果两个表中一个较小一个较大，则子查询表大的用exists，子查询表小的用in；</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>sql优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RestTemplate解析Gzip数据</title>
    <link href="/2020/12/26/2020-10-23-RestTemplate%E8%A7%A3%E6%9E%90Gzip%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/12/26/2020-10-23-RestTemplate%E8%A7%A3%E6%9E%90Gzip%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="RestTemplate解析Gzip数据"><a href="#RestTemplate解析Gzip数据" class="headerlink" title="RestTemplate解析Gzip数据"></a>RestTemplate解析Gzip数据</h1><p>若request时header添加了接收服务数据可以为gzip压缩数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">httpHeaders.add(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>,<span class="hljs-string">&quot;gzip, deflate&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>服务器返回压缩数据时，常规解析数据时会出现乱码问题,这里如果使用RestTemplate可以使用Apache httpclient，Apache HttpClient 支持gzip编码，要使用这个功能，构造HttpCOmponentsClientHttpRequestFactory</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;<br>        RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplate(<br>                <span class="hljs-comment">// 使用HttpClient，支持GZIP</span><br>                <span class="hljs-keyword">new</span> HttpComponentsClientHttpRequestFactory());<br>        restTemplate.getMessageConverters().set(<span class="hljs-number">1</span>,<br>                <span class="hljs-comment">// 支持中文编码</span><br>                <span class="hljs-keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8));<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign-provider-customer</title>
    <link href="/2020/12/25/2020-08-08-Feign-provider-customer/"/>
    <url>/2020/12/25/2020-08-08-Feign-provider-customer/</url>
    
    <content type="html"><![CDATA[<p>项目中常用的架构如图，Erueka作为服务的注册和发现中心，服务提供者provider和消费者consumer通过server注册和发现服务，本文主要讨论搭建如图架构和使用Feign实现声明式调用。sever和client参考之前的文章】</p><p><img src="/images/image-10.png"></p><h3 id="1、provider"><a href="#1、provider" class="headerlink" title="1、provider"></a>1、provider</h3><p>yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment">#    用户指定注册到server上的应用名</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://test:12345@localhost:8761/eureka/,http://test:12345@localhost:8762/eureka/,http://test:12345@localhost:8763/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-comment">#    将自己的ip注册上</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8759</span><br></code></pre></div></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eurekaprovider;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaProviderApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaProviderApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里作为服务提供者，提供一个接口：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eurekaprovider.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;描述: 服务提供 &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhenglin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2020/8/8 10:16 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getInfo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">(String msg)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> msg+<span class="hljs-string">&quot;_hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2、customer"><a href="#2、customer" class="headerlink" title="2、customer"></a>2、customer</h3><p>maven引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>启动加上@EnableFeignClients注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eureka;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaCustomerApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaCustomerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建一个接口，创建要调用的方法使其和provider提供的接口一致</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eureka.service;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-meta">@FeignClient(name= &quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HelloService</span> </span>&#123;<br><br>     <span class="hljs-comment">//@RequestParam对应GET方法是必要的，否则请求将转换为POST调用出现Method Not Allowed</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/getInfo&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String msg)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后写一个controller调用接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eureka.controller;<br><br><span class="hljs-keyword">import</span> com.example.eureka.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;描述: controller &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhenglin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2020/8/8 10:25 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testGetInfo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">(String msg)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> helloService.getInfo(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>访问：localhost:8760/testGetInfo</p><p>返回</p><p><img src="/images/image-11.png"></p>]]></content>
    
    
    <categories>
      
      <category>springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka-client</title>
    <link href="/2020/12/25/2020-08-07-Eureka-client/"/>
    <url>/2020/12/25/2020-08-07-Eureka-client/</url>
    
    <content type="html"><![CDATA[<p>如果我们已经搭建了(高可用)的<a href="https://swayingleaves.github.io/2020/12/25/2020-08-07-Eureka-server/">server</a>服务注册中心，那么现在可以将client端也注册到server。</p><h3 id="1、配置ymal"><a href="#1、配置ymal" class="headerlink" title="1、配置ymal"></a>1、配置ymal</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br><span class="hljs-comment">#    用户指定注册到server上的应用名</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://test:12345@localhost:8761/eureka/,http://test:12345@localhost:8762/eureka/</span><br>  <span class="hljs-attr">instance:</span><br><span class="hljs-comment">#    将自己的ip注册上</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8760</span><br></code></pre></div></td></tr></table></figure><h3 id="2、启动类加上注解-EnableDiscoveryClient"><a href="#2、启动类加上注解-EnableDiscoveryClient" class="headerlink" title="2、启动类加上注解@EnableDiscoveryClient"></a>2、启动类加上注解@EnableDiscoveryClient</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eureka;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaProviderApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><h3 id="4、访问控制台页面"><a href="#4、访问控制台页面" class="headerlink" title="4、访问控制台页面"></a>4、访问控制台页面</h3><p>可以看到client端已经注册上来了</p><p><img src="/images/1-5.png"></p>]]></content>
    
    
    <categories>
      
      <category>springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka-server</title>
    <link href="/2020/12/25/2020-08-07-Eureka-server/"/>
    <url>/2020/12/25/2020-08-07-Eureka-server/</url>
    
    <content type="html"><![CDATA[<h3 id="1、添加maven依赖"><a href="#1、添加maven依赖" class="headerlink" title="1、添加maven依赖"></a>1、添加maven依赖</h3><p>这里要注意springboot和springcloud的版本对应，写这篇文章时使用的是当时最新的版本：<a href="https://spring.io/projects/spring-cloud">https://</a><a href="https://spring.io/projects/spring-cloud">spring.io/projects/spring-cloud</a></p><p><img src="/images/1-1.png"></p><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2、yml配置"><a href="#2、yml配置" class="headerlink" title="2、yml配置"></a>2、yml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">basic:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">user:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">12345</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">s1</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">server1</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://test:12345@localhost:8762/eureka,http://test:12345@localhost:8763/eureka</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">s2</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8762</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">server2</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://test:12345@localhost:8761/eureka,http://test:12345@localhost:8763/eureka</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">s3</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8763</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">server3</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://test:12345@localhost:8761/eureka,http://test:12345@localhost:8762/eureka</span><br></code></pre></div></td></tr></table></figure><p>这里需要注意几点：</p><p>1、引入spring-security添加了用户认证，所以service-url连接信息上需要写上用户名和密码</p><p>2、引入spring-security认证，会报如下错误</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server<br>    at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:<span class="hljs-number">112</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="hljs-number">56</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$<span class="hljs-number">1.</span>execute(EurekaHttpClientDecorator.java:<span class="hljs-number">59</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:<span class="hljs-number">77</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="hljs-number">56</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:<span class="hljs-number">857</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:<span class="hljs-number">121</span>) ~[eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at com.netflix.discovery.InstanceInfoReplicator$<span class="hljs-number">1.</span>run(InstanceInfoReplicator.java:<span class="hljs-number">101</span>) [eureka-client-<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>.jar:<span class="hljs-number">1.9</span><span class="hljs-number">.21</span>]<br>    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="hljs-number">511</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="hljs-number">266</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="hljs-number">201</span>(ScheduledThreadPoolExecutor.java:<span class="hljs-number">180</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="hljs-number">293</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1149</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">624</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br>    at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>) [na:<span class="hljs-number">1.8</span><span class="hljs-number">.0_231</span>]<br></code></pre></div></td></tr></table></figure><p>security默认启用了csrf检验我们需要关闭它</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eurekaserver.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhenglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//关闭csrf</span><br>        http.csrf().disable();<br>        <span class="hljs-comment">//开启认证</span><br>        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>启动类上加入注解@EnableEurekaServer</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eurekaserver;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用idea配置两个启动文件分别指定不同的profiles</p><p><img src="/images/1-2.png"></p><p>然后分别run s1 s2 s3</p><h3 id="4、访问控制台页面"><a href="#4、访问控制台页面" class="headerlink" title="4、访问控制台页面"></a>4、访问控制台页面</h3><p>输入配置认证信息</p><p><img src="/images/1-3.png"></p><p>可以看到副本和实例都上来了</p><p><img src="/images/1-4.png"></p>]]></content>
    
    
    <categories>
      
      <category>springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL取每个分组后的top N优化</title>
    <link href="/2020/12/25/2020-06-16-MySQL%E5%8F%96%E6%AF%8F%E4%B8%AA%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84top-N%E4%BC%98%E5%8C%96/"/>
    <url>/2020/12/25/2020-06-16-MySQL%E5%8F%96%E6%AF%8F%E4%B8%AA%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84top-N%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 表主要结构如下，需求为取时间范围内的某品牌的每个平台下的view_or_engagement最大的3条</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`word_cloud`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  <span class="hljs-string">`brand`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;品牌&#x27;</span>,<br>  <span class="hljs-string">`platform`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;平台&#x27;</span>,<br>  <span class="hljs-string">`view_or_engagement`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;阅读或订阅&#x27;</span>,<br>  <span class="hljs-string">`article`</span> mediumtext <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_bin <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;文章&#x27;</span>,<br>  <span class="hljs-string">`title`</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;标题&#x27;</span>,<br>  <span class="hljs-string">`url`</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;链接&#x27;</span>,<br>  <span class="hljs-string">`time`</span> <span class="hljs-built_in">date</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;时间&#x27;</span>,<br>  <span class="hljs-string">`data_type`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;类型&#x27;</span>,<br>  <span class="hljs-string">`md5_flag`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;md5标志&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`K`</span> (<span class="hljs-string">`data_type`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`k_md5`</span> (<span class="hljs-string">`md5_flag`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">123698</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;<br></code></pre></div></td></tr></table></figure><blockquote><p> 优化前的SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> brand,platform,view_or_engagement,title,<span class="hljs-keyword">url</span>  <span class="hljs-keyword">FROM</span> (<br>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> word_cloud <span class="hljs-keyword">WHERE</span> brand = <span class="hljs-string">&#x27;Siemens&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span> &gt;= <span class="hljs-string">&#x27;2020-04-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span>&lt;<span class="hljs-string">&#x27;2020-04-20&#x27;</span><br>) a <span class="hljs-keyword">WHERE</span> (<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">FROM</span> (<br>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> word_cloud <span class="hljs-keyword">WHERE</span>  brand = <span class="hljs-string">&#x27;Siemens&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span> &gt;= <span class="hljs-string">&#x27;2020-04-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span>&lt;<span class="hljs-string">&#x27;2020-04-20&#x27;</span><br>    ) b <span class="hljs-keyword">WHERE</span> b.view_or_engagement &gt; a.view_or_engagement <span class="hljs-keyword">and</span> a.data_type = b.data_type<br>    <span class="hljs-keyword">and</span> a.platform = b.platform <span class="hljs-keyword">and</span> a.brand = b.brand<br>) &lt; <span class="hljs-number">3</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> view_or_engagement <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p> 优化后的SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> brand,platform,view_or_engagement,title,<span class="hljs-keyword">url</span> <br><span class="hljs-keyword">FROM</span>( <br>  <span class="hljs-keyword">SELECT</span> brand,platform,view_or_engagement,title,<span class="hljs-keyword">url</span>, <br>   @order_rank := <span class="hljs-keyword">IF</span>(@curr_ = platform,@order_rank + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> order_rank, <br>   @curr_ := platform <br>   <span class="hljs-keyword">FROM</span> word_cloud <br>   <span class="hljs-keyword">WHERE</span>  brand = <span class="hljs-string">&#x27;Siemens&#x27;</span><br>   <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span> &gt;= <span class="hljs-string">&#x27;2020-04-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">time</span> &lt; <span class="hljs-string">&#x27;2020-04-20&#x27;</span> <br>   <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> platform,view_or_engagement <span class="hljs-keyword">desc</span>  <br>) b <span class="hljs-keyword">WHERE</span> order_rank &lt;= <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>主要是使用了SQL变量，参考文章如下，点击查看</p><p><a href="https://towardsdatascience.com/mysql-how-to-write-a-query-that-returns-the-top-records-in-a-group-12865695f436">MySQL: How to Write a Query That Returns the Top Records in a Group</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>sql优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot-pulsar</title>
    <link href="/2020/12/25/2020-09-12-spring-boot-pulsar/"/>
    <url>/2020/12/25/2020-09-12-spring-boot-pulsar/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-pulsar工具"><a href="#spring-pulsar工具" class="headerlink" title="spring-pulsar工具"></a>spring-pulsar工具</h1><p><a href="https://github.com/Swayingleaves/spring-boot-starter-pulsar">Github 地址</a></p><blockquote><ul><li>pom引入依赖</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.swayingleaves<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-pulsar<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>application.yml 配置相关属性</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">pulsar:</span><br>  <span class="hljs-comment"># 服务器地址</span><br>  <span class="hljs-attr">serviceUrl:</span> <span class="hljs-string">pulsar://127.0.0.1:6650</span><br>  <span class="hljs-comment"># io线程数默认10</span><br>  <span class="hljs-attr">ioThreads:</span> <span class="hljs-number">10</span><br>  <span class="hljs-comment"># listener线程数默认10</span><br>  <span class="hljs-attr">listenerThreads:</span> <span class="hljs-number">10</span><br>  <span class="hljs-comment"># JSON/JSONArray格式数据的生产者的topic，多个使用英文逗号分隔</span><br>  <span class="hljs-attr">jsonProducers:</span> <span class="hljs-string">producer1-json</span><br>  <span class="hljs-comment"># string格式数据的生产者的topic，多个使用英文逗号分隔</span><br>  <span class="hljs-attr">stringProducers:</span> <span class="hljs-string">producer2-str</span><br>  <span class="hljs-comment"># 消费者topic，多个使用英文逗号分隔</span><br>  <span class="hljs-attr">consumers:</span> <span class="hljs-string">consumers1,consumers2,consumers3</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>生产者使用示例</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootStarterPulsarApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    PulsarTemplate pulsarTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendStrMsg</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PulsarClientException </span>&#123;<br>        pulsarTemplate.sendStringMsg(<span class="hljs-string">&quot;topic&quot;</span>,<span class="hljs-string">&quot;str&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendJsonMsg</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PulsarClientException </span>&#123;<br>        User user = User.builder()<br>                .age(<span class="hljs-number">18</span>)<br>                .name(<span class="hljs-string">&quot;Jack&quot;</span>)<br>                .build();<br>        pulsarTemplate.sendJsonMsg(<span class="hljs-string">&quot;topic&quot;</span>,user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendJsonArrayMsg</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PulsarClientException </span>&#123;<br>        User jack = User.builder()<br>                .age(<span class="hljs-number">18</span>)<br>                .name(<span class="hljs-string">&quot;Jack&quot;</span>)<br>                .build();<br>        User xiao = User.builder()<br>                .age(<span class="hljs-number">20</span>)<br>                .name(<span class="hljs-string">&quot;xiao&quot;</span>)<br>                .build();<br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">2</span>);<br>        users.add(xiao);<br>        users.add(jack);<br>        pulsarTemplate.sendJsonArrayMsg(<span class="hljs-string">&quot;topic&quot;</span>,users);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><ul><li>消费者使用示例</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReceiveDataService</span> </span>&#123;<br><br>    <span class="hljs-meta">@PulsarConsumer(topic =&quot;#consumers[0]&quot;,clazz = Serialization.JSON)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(JSONObject msg)</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;receive msg:&#123;&#125;&quot;</span>,msg);<br>    &#125;<br>    <br>    <span class="hljs-meta">@PulsarConsumer(topic =&quot;#consumers[1]&quot;,clazz = Serialization.STRING)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(String msg)</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;receive msg:&#123;&#125;&quot;</span>,msg);<br>    &#125;<br>    <br>    <span class="hljs-meta">@PulsarConsumer(topic =&quot;#consumers[2]&quot;,clazz = Serialization.JSON_ARRAY)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(JSONArray msg)</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;receive msg:&#123;&#125;&quot;</span>,msg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开源项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>pulsar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>smart_auth_util 权限认证工具</title>
    <link href="/2020/12/25/2020-09-11-smart-auth-util/"/>
    <url>/2020/12/25/2020-09-11-smart-auth-util/</url>
    
    <content type="html"><![CDATA[<h1 id="权限认证工具"><a href="#权限认证工具" class="headerlink" title="权限认证工具"></a>权限认证工具</h1><p><a href="https://github.com/Swayingleaves/smart-auth-util">Github地址 </a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p> 配置本地maven 以适配私服，或者修改为自己的私服配置</p></blockquote><blockquote><p>pom引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.swayingleaves<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>smart-auth-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;latest-version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>要使用auth-util,使用的项目需要的Redis配置相同</li><li>实现强依赖Redis，请配置Redis相关</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">xx</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxx</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>启动类添加扫描包注解</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.swayingleaves&quot;&#125;)</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>不一定能适用于大家的项目，但是看下实现逻辑就好</li></ul></blockquote><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>详细的参看</p><p><a href="https://github.com/Swayingleaves/smart-auth-util">Github地址 </a></p>]]></content>
    
    
    <categories>
      
      <category>开源项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2020/12/25/2020-06-06-helloworld/"/>
    <url>/2020/12/25/2020-06-06-helloworld/</url>
    
    <content type="html"><![CDATA[<p><strong>在2010年的时候，那时村里刚通网，怀着对世界的好奇浏览各种形形色色的网页、博客或贴吧，那时心里就萌发了要建立一个自己的博客网站的想法，真正付诸行动的是在2015年，也就是刚入大学的时候，于是开始搭建自己的网站博客，怀着自己也即将在这无垠的互联网拥有一个小角落的激动心情注册了一个域名，并且在某云上买了9.9包月的学生虚拟机。备案，写模板，上传，发布….耶~~我也有了自己的网站了，那时候很开心，但是却只是个index.html的首页，除此外别无其他内容，如果说大学是一个湖泊，那我就是里面一条浪浪荡荡的鱼，什么地方都去游一遍，但是记忆却只有7秒，什么知识都没收进口袋里。自然，由于“囊中羞涩”，什么东西都不敢放在这个小角落里，慢慢这个网站也蒙上了厚厚的尘。</strong></p><p><strong>后来，快毕业了，工作了，接触了第一份工作，写了第一行代码，完成了第一个项目，拿到了第一份工资，在日积月累中，自己的代码水平在慢慢升高，也越来越意识到写博客文对于敲代码的益处，于是，就在6.1号，决定再次重启这个想法，并决定将它作为一项计划，所以，写下首记，谨此来提醒自己。</strong></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
